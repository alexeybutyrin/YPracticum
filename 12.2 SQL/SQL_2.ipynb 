{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "571b2bab",
   "metadata": {},
   "source": [
    "**SQL**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6eb1c548",
   "metadata": {},
   "source": [
    "Коронавирус застал мир врасплох, изменив привычный порядок вещей. В свободное время жители городов больше не выходят на улицу, не посещают кафе и торговые центры. Зато стало больше времени для книг. Это заметили стартаперы — и бросились создавать приложения для тех, кто любит читать.\n",
    "\n",
    "Наша компания решила быть на волне и купила крупный сервис для чтения книг по подписке. Первая задача как аналитика — проанализировать базу данных.\n",
    "В ней — информация о книгах, издательствах, авторах, а также пользовательские обзоры книг. Эти данные помогут нам сформулировать ценностное предложение для нового продукта."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ae7c7ac",
   "metadata": {},
   "source": [
    "## Описание данных\n",
    "\n",
    "**Таблица `books`**\n",
    "\n",
    "Содержит данные о книгах:\n",
    "\n",
    "- `book_id` — идентификатор книги;\n",
    "- `author_id` — идентификатор автора;\n",
    "- `title` — название книги;\n",
    "- `num_pages` — количество страниц;\n",
    "- `publication_date` — дата публикации книги;\n",
    "- `publisher_id` — идентификатор издателя.\n",
    "\n",
    "**Таблица `authors`**\n",
    "\n",
    "Содержит данные об авторах:\n",
    "\n",
    "- `author_id` — идентификатор автора;\n",
    "- `author` — имя автора.\n",
    "\n",
    "**Таблица `publishers`**\n",
    "\n",
    "Содержит данные об издательствах:\n",
    "\n",
    "- `publisher_id` — идентификатор издательства;\n",
    "- `publisher` — название издательства;\n",
    "\n",
    "**Таблица `ratings`**\n",
    "\n",
    "Содержит данные о пользовательских оценках книг:\n",
    "\n",
    "- `rating_id` — идентификатор оценки;\n",
    "- `book_id` — идентификатор книги;\n",
    "- `username` — имя пользователя, оставившего оценку;\n",
    "- `rating` — оценка книги.\n",
    "\n",
    "**Таблица `reviews`**\n",
    "\n",
    "Содержит данные о пользовательских обзорах на книги:\n",
    "\n",
    "- `review_id` — идентификатор обзора;\n",
    "- `book_id` — идентификатор книги;\n",
    "- `username` — имя пользователя, написавшего обзор;\n",
    "- `text` — текст обзора."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ee2bb196",
   "metadata": {},
   "outputs": [],
   "source": [
    "# импортируем библиотеки\n",
    "import pandas as pd\n",
    "from sqlalchemy import text, create_engine\n",
    "from IPython.display import Image\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "825a04b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<img src=\"https://concrete-web-bad.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F069818d1-0e5c-4d87-a461-0de584ab9c33%2FUntitled_(33).png?id=bd53c8db-b4fd-49eb-8cc9-572ebb3c9163&table=block&spaceId=9e4bd47b-c6e6-4ca3-bcee-279794b47315&width=1640&userId=&cache=v2\"/>"
      ],
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ER- Диогорамма базы данных\n",
    "Image(url='https://concrete-web-bad.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F069818d1-0e5c-4d87-a461-0de584ab9c33%2FUntitled_(33).png?id=bd53c8db-b4fd-49eb-8cc9-572ebb3c9163&table=block&spaceId=9e4bd47b-c6e6-4ca3-bcee-279794b47315&width=1640&userId=&cache=v2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ab64dfe0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# устанавливаем параметры\n",
    "db_config = {'user': 'praktikum_student', # имя пользователя\n",
    "'pwd': 'Sdf4$2;d-d30pp', # пароль\n",
    "'host': 'rc1b-wcoijxj3yxfsf3fs.mdb.yandexcloud.net',\n",
    "'port': 6432, # порт подключения\n",
    "'db': 'data-analyst-final-project-db'} # название базы данных\n",
    "connection_string = 'postgresql://{user}:{pwd}@{host}:{port}/{db}'.format(**db_config)\n",
    "# сохраняем коннектор\n",
    "engine = create_engine(connection_string, connect_args={'sslmode':'require'}) \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e94c2ef",
   "metadata": {},
   "source": [
    "Создадим функцию для удобства запросов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0875c1f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def func(sql):\n",
    "    con=engine.connect()\n",
    "    return pd.io.sql.read_sql(sql=text(query), con = con)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1542cf51",
   "metadata": {},
   "source": [
    "##  Знакомство с базой данных"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b9bc6d5",
   "metadata": {},
   "source": [
    "Ознакомимся с таблицами. Проверим корректность типов данных и наличие пропусков в некоторых столбцах."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51aa4e9f",
   "metadata": {},
   "source": [
    "Книги"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ecbb063c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Таблица \"books\"\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>book_id</th>\n",
       "      <th>author_id</th>\n",
       "      <th>title</th>\n",
       "      <th>num_pages</th>\n",
       "      <th>publication_date</th>\n",
       "      <th>publisher_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>546</td>\n",
       "      <td>'Salem's Lot</td>\n",
       "      <td>594</td>\n",
       "      <td>2005-11-01</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>465</td>\n",
       "      <td>1 000 Places to See Before You Die</td>\n",
       "      <td>992</td>\n",
       "      <td>2003-05-22</td>\n",
       "      <td>336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>407</td>\n",
       "      <td>13 Little Blue Envelopes (Little Blue Envelope...</td>\n",
       "      <td>322</td>\n",
       "      <td>2010-12-21</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>82</td>\n",
       "      <td>1491: New Revelations of the Americas Before C...</td>\n",
       "      <td>541</td>\n",
       "      <td>2006-10-10</td>\n",
       "      <td>309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>125</td>\n",
       "      <td>1776</td>\n",
       "      <td>386</td>\n",
       "      <td>2006-07-04</td>\n",
       "      <td>268</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   book_id  author_id                                              title  \\\n",
       "0        1        546                                       'Salem's Lot   \n",
       "1        2        465                 1 000 Places to See Before You Die   \n",
       "2        3        407  13 Little Blue Envelopes (Little Blue Envelope...   \n",
       "3        4         82  1491: New Revelations of the Americas Before C...   \n",
       "4        5        125                                               1776   \n",
       "\n",
       "   num_pages publication_date  publisher_id  \n",
       "0        594       2005-11-01            93  \n",
       "1        992       2003-05-22           336  \n",
       "2        322       2010-12-21           135  \n",
       "3        541       2006-10-10           309  \n",
       "4        386       2006-07-04           268  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Типы данных\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column_name</th>\n",
       "      <th>data_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>book_id</td>\n",
       "      <td>integer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>author_id</td>\n",
       "      <td>integer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>title</td>\n",
       "      <td>text</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>num_pages</td>\n",
       "      <td>integer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>publication_date</td>\n",
       "      <td>date</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>publisher_id</td>\n",
       "      <td>integer</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        column_name data_type\n",
       "0           book_id   integer\n",
       "1         author_id   integer\n",
       "2             title      text\n",
       "3         num_pages   integer\n",
       "4  publication_date      date\n",
       "5      publisher_id   integer"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Пропуски в столбцах\n",
      "title\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>null</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   null\n",
       "0     0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "num_pages\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>null</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   null\n",
       "0     0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print('Таблица \"books\"')\n",
    "query = '''\n",
    "SELECT *\n",
    "FROM books\n",
    "LIMIT 5\n",
    "'''\n",
    "books = func(query)\n",
    "display (books)\n",
    "print('Типы данных')\n",
    "query = '''\n",
    "SELECT COLUMN_NAME, DATA_TYPE\n",
    "FROM INFORMATION_SCHEMA.COLUMNS\n",
    "WHERE TABLE_NAME = 'books'\n",
    "'''\n",
    "data_type = func(query)\n",
    "display (data_type)\n",
    "\n",
    "\n",
    "print('Пропуски в столбцах')\n",
    "print('title')\n",
    "query = '''\n",
    "SELECT COUNT(*) AS NULL\n",
    "FROM books\n",
    "WHERE title IS NULL;\n",
    "'''\n",
    "title_null = func(query)\n",
    "display (title_null)\n",
    "\n",
    "print('num_pages')\n",
    "query = '''\n",
    "SELECT COUNT(*) AS NULL\n",
    "FROM books\n",
    "WHERE num_pages IS NULL;\n",
    "'''\n",
    "num_pages_null = func(query)\n",
    "display (num_pages_null)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb7b227a",
   "metadata": {},
   "source": [
    "Авторы "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c42cd3b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Таблица \"authors\"\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>author_id</th>\n",
       "      <th>author</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>A.S. Byatt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Aesop/Laura Harris/Laura Gibbs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Agatha Christie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Alan Brennert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Alan Moore/David   Lloyd</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   author_id                          author\n",
       "0          1                      A.S. Byatt\n",
       "1          2  Aesop/Laura Harris/Laura Gibbs\n",
       "2          3                 Agatha Christie\n",
       "3          4                   Alan Brennert\n",
       "4          5        Alan Moore/David   Lloyd"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Типы данных\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column_name</th>\n",
       "      <th>data_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>author_id</td>\n",
       "      <td>integer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>author</td>\n",
       "      <td>text</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  column_name data_type\n",
       "0   author_id   integer\n",
       "1      author      text"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Пропуски в столбцах\n",
      "author\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>null</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   null\n",
       "0     0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print('Таблица \"authors\"')\n",
    "query = '''\n",
    "SELECT *\n",
    "FROM authors\n",
    "LIMIT 5\n",
    "'''\n",
    "books = func(query)\n",
    "display (books)\n",
    "print('Типы данных')\n",
    "query = '''\n",
    "SELECT COLUMN_NAME, DATA_TYPE\n",
    "FROM INFORMATION_SCHEMA.COLUMNS\n",
    "WHERE TABLE_NAME = 'authors'\n",
    "'''\n",
    "data_type = func(query)\n",
    "display (data_type)\n",
    "\n",
    "\n",
    "print('Пропуски в столбцах')\n",
    "print('author')\n",
    "query = '''\n",
    "SELECT COUNT(*) AS NULL\n",
    "FROM authors\n",
    "WHERE author IS NULL;\n",
    "'''\n",
    "author_null = func(query)\n",
    "display (author_null)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf077bee",
   "metadata": {},
   "source": [
    "Издательства"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "144d053a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Таблица \"publishers\"\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>publisher_id</th>\n",
       "      <th>publisher</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Ace</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Ace Book</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Ace Books</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Ace Hardcover</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Addison Wesley Publishing Company</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   publisher_id                          publisher\n",
       "0             1                                Ace\n",
       "1             2                           Ace Book\n",
       "2             3                          Ace Books\n",
       "3             4                      Ace Hardcover\n",
       "4             5  Addison Wesley Publishing Company"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Типы данных\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column_name</th>\n",
       "      <th>data_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>publisher_id</td>\n",
       "      <td>integer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>publisher</td>\n",
       "      <td>text</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    column_name data_type\n",
       "0  publisher_id   integer\n",
       "1     publisher      text"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Пропуски в столбцах\n",
      "publisher\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>null</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   null\n",
       "0     0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print('Таблица \"publishers\"')\n",
    "query = '''\n",
    "SELECT *\n",
    "FROM publishers\n",
    "LIMIT 5\n",
    "'''\n",
    "books = func(query)\n",
    "display (books)\n",
    "print('Типы данных')\n",
    "query = '''\n",
    "SELECT COLUMN_NAME, DATA_TYPE\n",
    "FROM INFORMATION_SCHEMA.COLUMNS\n",
    "WHERE TABLE_NAME = 'publishers'\n",
    "'''\n",
    "data_type = func(query)\n",
    "display (data_type)\n",
    "\n",
    "\n",
    "print('Пропуски в столбцах')\n",
    "print('publisher')\n",
    "query = '''\n",
    "SELECT COUNT(*) AS NULL\n",
    "FROM publishers\n",
    "WHERE publisher IS NULL;\n",
    "'''\n",
    "publisher_null = func(query)\n",
    "display (publisher_null)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a3bb619",
   "metadata": {},
   "source": [
    "Оценки книг"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a454a429",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Таблица \"ratings\"\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rating_id</th>\n",
       "      <th>book_id</th>\n",
       "      <th>username</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>ryanfranco</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>grantpatricia</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>brandtandrea</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>lorichen</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>mariokeller</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rating_id  book_id       username  rating\n",
       "0          1        1     ryanfranco       4\n",
       "1          2        1  grantpatricia       2\n",
       "2          3        1   brandtandrea       5\n",
       "3          4        2       lorichen       3\n",
       "4          5        2    mariokeller       2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Типы данных\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column_name</th>\n",
       "      <th>data_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>rating_id</td>\n",
       "      <td>integer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>book_id</td>\n",
       "      <td>integer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>username</td>\n",
       "      <td>text</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>rating</td>\n",
       "      <td>integer</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  column_name data_type\n",
       "0   rating_id   integer\n",
       "1     book_id   integer\n",
       "2    username      text\n",
       "3      rating   integer"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Пропуски в столбцах\n",
      "rating\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>null</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   null\n",
       "0     0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print('Таблица \"ratings\"')\n",
    "query = '''\n",
    "SELECT *\n",
    "FROM ratings\n",
    "LIMIT 5\n",
    "'''\n",
    "books = func(query)\n",
    "display (books)\n",
    "print('Типы данных')\n",
    "query = '''\n",
    "SELECT COLUMN_NAME, DATA_TYPE\n",
    "FROM INFORMATION_SCHEMA.COLUMNS\n",
    "WHERE TABLE_NAME = 'ratings'\n",
    "'''\n",
    "data_type = func(query)\n",
    "display (data_type)\n",
    "\n",
    "\n",
    "print('Пропуски в столбцах')\n",
    "print('rating')\n",
    "query = '''\n",
    "SELECT COUNT(*) AS NULL\n",
    "FROM ratings\n",
    "WHERE rating IS NULL;\n",
    "'''\n",
    "publisher_null = func(query)\n",
    "display (publisher_null)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc3da503",
   "metadata": {},
   "source": [
    "Обзоры"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f7dccb75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Таблица \"reviews\"\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_id</th>\n",
       "      <th>book_id</th>\n",
       "      <th>username</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>brandtandrea</td>\n",
       "      <td>Mention society tell send professor analysis. ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>ryanfranco</td>\n",
       "      <td>Foot glass pretty audience hit themselves. Amo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>lorichen</td>\n",
       "      <td>Listen treat keep worry. Miss husband tax but ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>johnsonamanda</td>\n",
       "      <td>Finally month interesting blue could nature cu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>scotttamara</td>\n",
       "      <td>Nation purpose heavy give wait song will. List...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   review_id  book_id       username  \\\n",
       "0          1        1   brandtandrea   \n",
       "1          2        1     ryanfranco   \n",
       "2          3        2       lorichen   \n",
       "3          4        3  johnsonamanda   \n",
       "4          5        3    scotttamara   \n",
       "\n",
       "                                                text  \n",
       "0  Mention society tell send professor analysis. ...  \n",
       "1  Foot glass pretty audience hit themselves. Amo...  \n",
       "2  Listen treat keep worry. Miss husband tax but ...  \n",
       "3  Finally month interesting blue could nature cu...  \n",
       "4  Nation purpose heavy give wait song will. List...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Типы данных\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column_name</th>\n",
       "      <th>data_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>review_id</td>\n",
       "      <td>integer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>book_id</td>\n",
       "      <td>integer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>username</td>\n",
       "      <td>text</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>text</td>\n",
       "      <td>text</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  column_name data_type\n",
       "0   review_id   integer\n",
       "1     book_id   integer\n",
       "2    username      text\n",
       "3        text      text"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Пропуски в столбцах\n",
      "username\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>null</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   null\n",
       "0     0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "text\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>null</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   null\n",
       "0     0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print('Таблица \"reviews\"')\n",
    "query = '''\n",
    "SELECT *\n",
    "FROM reviews\n",
    "LIMIT 5\n",
    "'''\n",
    "books = func(query)\n",
    "display (books)\n",
    "print('Типы данных')\n",
    "query = '''\n",
    "SELECT COLUMN_NAME, DATA_TYPE\n",
    "FROM INFORMATION_SCHEMA.COLUMNS\n",
    "WHERE TABLE_NAME = 'reviews'\n",
    "'''\n",
    "data_type = func(query)\n",
    "display (data_type)\n",
    "\n",
    "\n",
    "print('Пропуски в столбцах')\n",
    "print('username')\n",
    "query = '''\n",
    "SELECT COUNT(*) AS NULL\n",
    "FROM reviews\n",
    "WHERE username IS NULL\n",
    "'''\n",
    "username_null = func(query)\n",
    "display (username_null)\n",
    "print('text')\n",
    "query = '''\n",
    "SELECT COUNT(*) AS NULL\n",
    "FROM reviews\n",
    "WHERE text IS NULL;\n",
    "'''\n",
    "text_null = func(query)\n",
    "display (text_null)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28f151e9",
   "metadata": {},
   "source": [
    "С базой данных все в порядке, отсутстуют пропуски и устонавлены правильные типы данных в столбцах."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee497713",
   "metadata": {},
   "source": [
    "## Задания"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a950116",
   "metadata": {},
   "source": [
    "### Количество книг вышедших после 1 января 2000 года."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "40188de7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>819</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   count\n",
       "0    819"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "query = '''\n",
    "SELECT\n",
    "    COUNT(book_id)\n",
    "FROM\n",
    "    books\n",
    "WHERE\n",
    "    publication_date > '2000-01-01'\n",
    "'''\n",
    "\n",
    "func(query)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05d46c5f",
   "metadata": {},
   "source": [
    "После 1 января 2000 года вышло 819 книг."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79aca4dc",
   "metadata": {},
   "source": [
    "### Средняя оценка и количество обзоров для каждой книги."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0c45ded5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Расскоментить что бы посмотреть все.\n",
    "# pd.set_option(\"display.max_rows\", None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e1c25c36",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "      <th>avg_rating</th>\n",
       "      <th>reviews_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17</td>\n",
       "      <td>A Dirty Job (Grim Reaper  #1)</td>\n",
       "      <td>5.00</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>553</td>\n",
       "      <td>School's Out—Forever (Maximum Ride  #2)</td>\n",
       "      <td>5.00</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>444</td>\n",
       "      <td>Moneyball: The Art of Winning an Unfair Game</td>\n",
       "      <td>5.00</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>86</td>\n",
       "      <td>Arrows of the Queen (Heralds of Valdemar  #1)</td>\n",
       "      <td>5.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>972</td>\n",
       "      <td>Wherever You Go  There You Are: Mindfulness Me...</td>\n",
       "      <td>5.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>915</td>\n",
       "      <td>The World Is Flat: A Brief History of the Twen...</td>\n",
       "      <td>2.25</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>202</td>\n",
       "      <td>Drowning Ruth</td>\n",
       "      <td>2.00</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>316</td>\n",
       "      <td>His Excellency: George Washington</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>371</td>\n",
       "      <td>Junky</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>303</td>\n",
       "      <td>Harvesting the Heart</td>\n",
       "      <td>1.50</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      id                                              title  avg_rating  \\\n",
       "0     17                      A Dirty Job (Grim Reaper  #1)        5.00   \n",
       "1    553            School's Out—Forever (Maximum Ride  #2)        5.00   \n",
       "2    444       Moneyball: The Art of Winning an Unfair Game        5.00   \n",
       "3     86      Arrows of the Queen (Heralds of Valdemar  #1)        5.00   \n",
       "4    972  Wherever You Go  There You Are: Mindfulness Me...        5.00   \n",
       "..   ...                                                ...         ...   \n",
       "995  915  The World Is Flat: A Brief History of the Twen...        2.25   \n",
       "996  202                                      Drowning Ruth        2.00   \n",
       "997  316                  His Excellency: George Washington        2.00   \n",
       "998  371                                              Junky        2.00   \n",
       "999  303                               Harvesting the Heart        1.50   \n",
       "\n",
       "     reviews_count  \n",
       "0                4  \n",
       "1                3  \n",
       "2                3  \n",
       "3                2  \n",
       "4                2  \n",
       "..             ...  \n",
       "995              3  \n",
       "996              3  \n",
       "997              2  \n",
       "998              2  \n",
       "999              2  \n",
       "\n",
       "[1000 rows x 4 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query = '''\n",
    "SELECT\n",
    "    books.book_id AS id,\n",
    "    books.title AS title,\n",
    "    AVG(ratings.rating) AS avg_rating,\n",
    "    COUNT(DISTINCT reviews.review_id) AS reviews_count\n",
    "FROM\n",
    "    books\n",
    "LEFT JOIN reviews ON reviews.book_id = books.book_id\n",
    "LEFT JOIN ratings ON ratings.book_id = books.book_id\n",
    "GROUP BY\n",
    "    title,\n",
    "    id\n",
    "ORDER BY\n",
    "    avg_rating\n",
    "DESC, \n",
    "    reviews_count\n",
    "DESC \n",
    "'''\n",
    "func(query)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e350b56a",
   "metadata": {},
   "source": [
    "Составили список всех книг со средней оценкой и количеством обзоров. У книг с самым высоким рейтингом, больше всего обзоров на книгу A Dirty Job."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62f4bffc",
   "metadata": {},
   "source": [
    "### Издательство, которое выпустило наибольшее число книг толще 50 страниц;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d78c9f3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>publisher</th>\n",
       "      <th>books_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Penguin Books</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Vintage</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Grand Central Publishing</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  publisher  books_count\n",
       "0             Penguin Books           42\n",
       "1                   Vintage           31\n",
       "2  Grand Central Publishing           25"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query = '''\n",
    "SELECT\n",
    "    pub.publisher AS publisher,\n",
    "    COUNT(books.book_id) AS books_count\n",
    "FROM\n",
    "    publishers AS pub\n",
    "LEFT JOIN books ON pub.publisher_id = books.publisher_id\n",
    "WHERE\n",
    "    books.num_pages > 50\n",
    "GROUP BY\n",
    "    publisher\n",
    "ORDER BY\n",
    "    books_count\n",
    "DESC\n",
    "LIMIT 3\n",
    "'''\n",
    "func(query)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66711de9",
   "metadata": {},
   "source": [
    "Больше всего книг выпустило издательство \"Penguin Books\" - 42 книги."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed200936",
   "metadata": {},
   "source": [
    "### Автор с самой высокой средней оценкой книг — учитывайте только книги с 50 и более оценками."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0aa914b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>author</th>\n",
       "      <th>avg_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>J.K. Rowling/Mary GrandPré</td>\n",
       "      <td>4.29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       author  avg_rating\n",
       "0  J.K. Rowling/Mary GrandPré        4.29"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query = '''\n",
    "WITH popular_books AS(\n",
    "    SELECT\n",
    "        ratings.book_id\n",
    "    FROM\n",
    "        ratings\n",
    "    GROUP BY\n",
    "        ratings.book_id\n",
    "    HAVING\n",
    "        COUNT(ratings.book_id) >= 50\n",
    ")\n",
    "SELECT\n",
    "    authors.author,\n",
    "    ROUND(AVG(ratings.rating), 2) AS avg_rating\n",
    "FROM\n",
    "    ratings\n",
    "INNER JOIN books AS books\n",
    "ON\n",
    "    ratings.book_id = books.book_id\n",
    "INNER JOIN authors AS authors\n",
    "ON\n",
    "    books.author_id = authors.author_id\n",
    "INNER JOIN popular_books\n",
    "ON\n",
    "    ratings.book_id = popular_books.book_id\n",
    "GROUP BY\n",
    "    authors.author\n",
    "ORDER BY\n",
    "    avg_rating DESC\n",
    "LIMIT 1\n",
    "'''\n",
    "func(query)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ab36753",
   "metadata": {},
   "source": [
    "J.K. Rowling с иллюстратором Mary GrandPré."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42f394a8",
   "metadata": {},
   "source": [
    "### Среднее количество обзоров от пользователей, которые поставили больше 48 оценок."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e344aded",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>avg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    avg\n",
       "0  24.0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query = '''\n",
    "WITH\n",
    "    t AS(\n",
    "    SELECT\n",
    "        username,\n",
    "        COUNT(review_id) AS review_count\n",
    "    FROM\n",
    "        reviews\n",
    "    WHERE\n",
    "        username IN(\n",
    "        SELECT\n",
    "            username\n",
    "        FROM\n",
    "            ratings\n",
    "        GROUP BY\n",
    "            username\n",
    "        HAVING\n",
    "            COUNT(rating) > 48\n",
    "    )\n",
    "GROUP BY\n",
    "    username\n",
    ")\n",
    "SELECT\n",
    "    AVG(review_count)\n",
    "FROM\n",
    "    t\n",
    "       \n",
    "'''\n",
    "func(query)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4069fc67",
   "metadata": {},
   "source": [
    "24 обзора в среднем пишут пользователи, которые поставили больше 48 оценок"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "174d00bc",
   "metadata": {},
   "source": [
    "### Количество издательств,выпущенных книг и сколько всего тысяч страниц было в изданных книгах (отобразить только те года, в которых издано более 30 книг)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "73f1bfdc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Publishers</th>\n",
       "      <th>Books</th>\n",
       "      <th>Total Pages (thousands)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1999</td>\n",
       "      <td>26</td>\n",
       "      <td>41</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2000</td>\n",
       "      <td>35</td>\n",
       "      <td>38</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2001</td>\n",
       "      <td>41</td>\n",
       "      <td>60</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2002</td>\n",
       "      <td>62</td>\n",
       "      <td>94</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2003</td>\n",
       "      <td>65</td>\n",
       "      <td>105</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2004</td>\n",
       "      <td>88</td>\n",
       "      <td>124</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2005</td>\n",
       "      <td>89</td>\n",
       "      <td>139</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2006</td>\n",
       "      <td>109</td>\n",
       "      <td>184</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2007</td>\n",
       "      <td>38</td>\n",
       "      <td>50</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Publishers  Books  Total Pages (thousands)\n",
       "0  1999          26     41                       15\n",
       "1  2000          35     38                       13\n",
       "2  2001          41     60                       21\n",
       "3  2002          62     94                       38\n",
       "4  2003          65    105                       41\n",
       "5  2004          88    124                       46\n",
       "6  2005          89    139                       55\n",
       "7  2006         109    184                       68\n",
       "8  2007          38     50                       18"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query = '''\n",
    "SELECT\n",
    "    CAST(\n",
    "        EXTRACT(YEAR\n",
    "    FROM\n",
    "        publication_date) AS INTEGER\n",
    "    ) AS \"Year\",\n",
    "    COUNT(DISTINCT books.publisher_id) AS \"Publishers\",\n",
    "    COUNT(book_id) AS \"Books\",\n",
    "    SUM(num_pages) / 1000 AS \"Total Pages (thousands)\"\n",
    "FROM\n",
    "    books\n",
    "JOIN publishers ON books.publisher_id = publishers.publisher_id\n",
    "GROUP BY\n",
    "    CAST(\n",
    "        EXTRACT(YEAR\n",
    "    FROM\n",
    "        publication_date) AS INTEGER\n",
    "    )\n",
    "HAVING\n",
    "    COUNT(book_id) > 30;\n",
    "       \n",
    "'''\n",
    "func(query)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fafadcb",
   "metadata": {},
   "source": [
    "Количество издательств и выпускаемых книжек стабильно росло с пиком в 2006 года, в 2007 или произошел резкий спад или данные не за  полный год. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ced2d94e",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\"; style=\"border-left: 7px solid green\">\n",
    "<b>✅ Комментарий ревьюера, ревью 2</b> \n",
    "\n",
    "\n",
    "    \n",
    "✔️ Все верно.\n",
    "    \n",
    "<a class=\"tocSkip\"></a><s>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15d802f0",
   "metadata": {},
   "source": [
    "### Cредняя оценка тех книг, на которые написали отзывы более 3 человек и отдельно средняя оценку остальных книг.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2bb588b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>book_type</th>\n",
       "      <th>avg_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>revies_less_3</td>\n",
       "      <td>3.890191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>revies_more_3</td>\n",
       "      <td>3.949505</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       book_type  avg_rating\n",
       "0  revies_less_3    3.890191\n",
       "1  revies_more_3    3.949505"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query = '''\n",
    "WITH\n",
    "    t AS(\n",
    "    SELECT\n",
    "        book_id,\n",
    "        CASE WHEN COUNT(DISTINCT username) > 3 THEN 'revies_more_3' ELSE 'revies_less_3'\n",
    "END AS book_type\n",
    "FROM\n",
    "    reviews\n",
    "GROUP BY\n",
    "    book_id\n",
    ")\n",
    "SELECT\n",
    "    book_type,\n",
    "    AVG(rating) AS avg_rating\n",
    "FROM\n",
    "    ratings\n",
    "JOIN t ON ratings.book_id = t.book_id\n",
    "GROUP BY\n",
    "    book_type;\n",
    "''' \n",
    "func(query)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e399d20",
   "metadata": {},
   "source": [
    "Средняя оценка на те книги на которые большее 3 человек написало отзыв,  выше чем на остальные книги."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25f688de",
   "metadata": {},
   "source": [
    "## Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a571301",
   "metadata": {},
   "source": [
    "- С базой данных все в порядке, отсутстуют пропуски и устонавлены правильные типы данных в столбцах.\n",
    "- Средняя оценка и количество обзоров для каждой книги.\n",
    "- Составили список всех книг со средней оценкой и количеством обзоров. У книг с самым высоким рейтингом, больше всего обзоров на книгу A Dirty Job.\n",
    "- Больше всего книг выпустило издательство \"Penguin Books\" - 42 книги.\n",
    "- Автор с самой высокой средней оценкой книг — учитывайте только книги с 50 и более оценками - J.K. Rowling с иллюстратором Mary GrandPré.\n",
    "- 24 обзора в среднем пишут пользователи, которые поставили больше 48 оценок\n",
    "- Количество издательств и выпускаемых книжек стабильно росло с пиком в 2006 года, в 2007 или произошел резкий спад или данные не за полный год.\n",
    "- Средняя оценка на те книги на которые большее 3 человек написало отзыв,  выше чем на остальные книги."
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 84,
    "start_time": "2023-05-06T07:04:14.245Z"
   },
   {
    "duration": 650,
    "start_time": "2023-05-06T07:04:20.930Z"
   },
   {
    "duration": 10,
    "start_time": "2023-05-06T07:04:21.583Z"
   },
   {
    "duration": 11424,
    "start_time": "2023-05-06T07:04:21.596Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-06T07:04:33.023Z"
   },
   {
    "duration": 334,
    "start_time": "2023-05-06T07:04:33.029Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-06T07:04:33.365Z"
   },
   {
    "duration": 118,
    "start_time": "2023-05-06T07:04:33.371Z"
   },
   {
    "duration": 57,
    "start_time": "2023-05-06T07:04:33.491Z"
   },
   {
    "duration": 57,
    "start_time": "2023-05-06T07:04:33.550Z"
   },
   {
    "duration": 82,
    "start_time": "2023-05-06T07:04:33.610Z"
   },
   {
    "duration": 120,
    "start_time": "2023-05-06T08:27:27.092Z"
   },
   {
    "duration": 50,
    "start_time": "2023-05-06T08:29:19.071Z"
   },
   {
    "duration": 72,
    "start_time": "2023-05-06T08:29:26.905Z"
   },
   {
    "duration": 511,
    "start_time": "2023-05-06T08:58:26.339Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-06T08:58:26.852Z"
   },
   {
    "duration": 12879,
    "start_time": "2023-05-06T08:58:26.863Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-06T08:58:39.743Z"
   },
   {
    "duration": 357,
    "start_time": "2023-05-06T08:58:39.748Z"
   },
   {
    "duration": 2,
    "start_time": "2023-05-06T08:58:40.107Z"
   },
   {
    "duration": 148,
    "start_time": "2023-05-06T08:58:40.111Z"
   },
   {
    "duration": 74,
    "start_time": "2023-05-06T08:58:40.261Z"
   },
   {
    "duration": 91,
    "start_time": "2023-05-06T08:58:40.336Z"
   },
   {
    "duration": 79,
    "start_time": "2023-05-06T08:58:40.430Z"
   },
   {
    "duration": 96,
    "start_time": "2023-05-06T09:03:32.542Z"
   },
   {
    "duration": 70,
    "start_time": "2023-05-06T09:03:38.492Z"
   },
   {
    "duration": 514,
    "start_time": "2023-05-06T09:03:52.366Z"
   },
   {
    "duration": 11,
    "start_time": "2023-05-06T09:03:52.885Z"
   },
   {
    "duration": 15241,
    "start_time": "2023-05-06T09:03:52.901Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-06T09:04:08.146Z"
   },
   {
    "duration": 410,
    "start_time": "2023-05-06T09:04:08.151Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T09:04:08.563Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T09:04:08.564Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T09:04:08.565Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T09:04:08.566Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T09:04:08.567Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T09:04:08.568Z"
   },
   {
    "duration": 251,
    "start_time": "2023-05-06T09:04:37.418Z"
   },
   {
    "duration": 81,
    "start_time": "2023-05-06T09:05:09.541Z"
   },
   {
    "duration": 60,
    "start_time": "2023-05-06T09:05:18.405Z"
   },
   {
    "duration": 102,
    "start_time": "2023-05-06T09:06:12.636Z"
   },
   {
    "duration": 204,
    "start_time": "2023-05-06T09:06:21.721Z"
   },
   {
    "duration": 212,
    "start_time": "2023-05-06T09:08:07.259Z"
   },
   {
    "duration": 211,
    "start_time": "2023-05-06T09:09:03.335Z"
   },
   {
    "duration": 113,
    "start_time": "2023-05-06T09:09:53.071Z"
   },
   {
    "duration": 104,
    "start_time": "2023-05-06T09:10:10.650Z"
   },
   {
    "duration": 182,
    "start_time": "2023-05-06T09:13:26.835Z"
   },
   {
    "duration": 70,
    "start_time": "2023-05-06T09:13:44.353Z"
   },
   {
    "duration": 120,
    "start_time": "2023-05-06T09:16:01.032Z"
   },
   {
    "duration": 148,
    "start_time": "2023-05-06T09:16:06.302Z"
   },
   {
    "duration": 91,
    "start_time": "2023-05-06T09:16:43.648Z"
   },
   {
    "duration": 115,
    "start_time": "2023-05-06T09:16:55.458Z"
   },
   {
    "duration": 139,
    "start_time": "2023-05-06T09:19:26.898Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-06T09:19:34.652Z"
   },
   {
    "duration": 107,
    "start_time": "2023-05-06T09:19:49.146Z"
   },
   {
    "duration": 83,
    "start_time": "2023-05-06T09:21:21.476Z"
   },
   {
    "duration": 334,
    "start_time": "2023-05-06T09:26:16.402Z"
   },
   {
    "duration": 363,
    "start_time": "2023-05-06T09:29:08.290Z"
   },
   {
    "duration": 368,
    "start_time": "2023-05-06T09:29:59.387Z"
   },
   {
    "duration": 241,
    "start_time": "2023-05-06T09:36:33.507Z"
   },
   {
    "duration": 205,
    "start_time": "2023-05-06T09:37:12.322Z"
   },
   {
    "duration": 14,
    "start_time": "2023-05-06T09:39:20.807Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-06T09:39:25.146Z"
   },
   {
    "duration": 10,
    "start_time": "2023-05-06T09:39:28.219Z"
   },
   {
    "duration": 296,
    "start_time": "2023-05-06T09:40:42.031Z"
   },
   {
    "duration": 206,
    "start_time": "2023-05-06T09:45:51.392Z"
   },
   {
    "duration": 216,
    "start_time": "2023-05-06T09:50:19.019Z"
   },
   {
    "duration": 13,
    "start_time": "2023-05-06T09:50:46.491Z"
   },
   {
    "duration": 236,
    "start_time": "2023-05-06T09:52:29.029Z"
   },
   {
    "duration": 182,
    "start_time": "2023-05-06T09:53:21.332Z"
   },
   {
    "duration": 365,
    "start_time": "2023-05-06T09:53:37.116Z"
   },
   {
    "duration": 103,
    "start_time": "2023-05-06T10:08:23.945Z"
   },
   {
    "duration": 127,
    "start_time": "2023-05-06T10:12:02.436Z"
   },
   {
    "duration": 103,
    "start_time": "2023-05-06T10:12:51.422Z"
   },
   {
    "duration": 91,
    "start_time": "2023-05-06T10:14:54.850Z"
   },
   {
    "duration": 75,
    "start_time": "2023-05-06T10:15:51.816Z"
   },
   {
    "duration": 188,
    "start_time": "2023-05-06T10:16:03.834Z"
   },
   {
    "duration": 68,
    "start_time": "2023-05-06T10:16:48.713Z"
   },
   {
    "duration": 89,
    "start_time": "2023-05-06T10:17:50.268Z"
   },
   {
    "duration": 117,
    "start_time": "2023-05-06T10:21:22.824Z"
   },
   {
    "duration": 100,
    "start_time": "2023-05-06T10:21:26.070Z"
   },
   {
    "duration": 85,
    "start_time": "2023-05-06T10:25:10.138Z"
   },
   {
    "duration": 68,
    "start_time": "2023-05-06T10:25:38.917Z"
   },
   {
    "duration": 60,
    "start_time": "2023-05-06T10:33:07.907Z"
   },
   {
    "duration": 96,
    "start_time": "2023-05-06T10:44:12.149Z"
   },
   {
    "duration": 70,
    "start_time": "2023-05-06T10:45:55.698Z"
   },
   {
    "duration": 54,
    "start_time": "2023-05-06T10:46:03.315Z"
   },
   {
    "duration": 61,
    "start_time": "2023-05-06T10:46:09.396Z"
   },
   {
    "duration": 88,
    "start_time": "2023-05-06T10:53:56.447Z"
   },
   {
    "duration": 96,
    "start_time": "2023-05-06T10:54:06.463Z"
   },
   {
    "duration": 83,
    "start_time": "2023-05-06T11:02:37.319Z"
   },
   {
    "duration": 149,
    "start_time": "2023-05-06T11:02:56.892Z"
   },
   {
    "duration": 70,
    "start_time": "2023-05-06T11:03:14.029Z"
   },
   {
    "duration": 53,
    "start_time": "2023-05-06T11:03:58.599Z"
   },
   {
    "duration": 103,
    "start_time": "2023-05-06T11:06:15.106Z"
   },
   {
    "duration": 64,
    "start_time": "2023-05-06T11:12:15.501Z"
   },
   {
    "duration": 198,
    "start_time": "2023-05-06T11:13:00.870Z"
   },
   {
    "duration": 162,
    "start_time": "2023-05-06T11:13:02.599Z"
   },
   {
    "duration": 175,
    "start_time": "2023-05-06T11:13:51.322Z"
   },
   {
    "duration": 75,
    "start_time": "2023-05-06T11:16:26.844Z"
   },
   {
    "duration": 77,
    "start_time": "2023-05-06T11:18:22.224Z"
   },
   {
    "duration": 69,
    "start_time": "2023-05-06T11:20:25.640Z"
   },
   {
    "duration": 61,
    "start_time": "2023-05-06T11:22:02.146Z"
   },
   {
    "duration": 58,
    "start_time": "2023-05-06T11:22:26.491Z"
   },
   {
    "duration": 84,
    "start_time": "2023-05-06T11:23:14.633Z"
   },
   {
    "duration": 63,
    "start_time": "2023-05-06T11:23:44.406Z"
   },
   {
    "duration": 89,
    "start_time": "2023-05-06T11:24:05.334Z"
   },
   {
    "duration": 77,
    "start_time": "2023-05-06T11:24:07.966Z"
   },
   {
    "duration": 91,
    "start_time": "2023-05-06T11:32:34.206Z"
   },
   {
    "duration": 445,
    "start_time": "2023-05-06T11:42:50.740Z"
   },
   {
    "duration": 15,
    "start_time": "2023-05-06T11:42:51.190Z"
   },
   {
    "duration": 11612,
    "start_time": "2023-05-06T11:42:51.210Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-06T11:43:02.824Z"
   },
   {
    "duration": 105,
    "start_time": "2023-05-06T11:43:02.829Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:43:02.936Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:43:02.938Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:43:02.939Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:43:02.940Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:43:02.941Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:43:02.946Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:43:02.954Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:43:02.958Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:43:02.959Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:43:02.960Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:43:02.962Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:43:02.963Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:43:02.964Z"
   },
   {
    "duration": 499,
    "start_time": "2023-05-06T11:44:11.339Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-06T11:44:11.839Z"
   },
   {
    "duration": 10909,
    "start_time": "2023-05-06T11:44:11.848Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-06T11:44:22.760Z"
   },
   {
    "duration": 140,
    "start_time": "2023-05-06T11:44:22.765Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:44:22.914Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:44:22.921Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:44:22.923Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:44:22.924Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:44:22.925Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:44:22.927Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:44:22.929Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:44:22.930Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:44:22.931Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:44:22.932Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:44:22.933Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:44:22.935Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-06T11:44:22.936Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-06T11:44:40.602Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-06T11:44:40.612Z"
   },
   {
    "duration": 8,
    "start_time": "2023-05-06T11:44:40.620Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-06T11:44:40.629Z"
   },
   {
    "duration": 492,
    "start_time": "2023-05-06T11:44:40.635Z"
   },
   {
    "duration": 183,
    "start_time": "2023-05-06T11:44:41.128Z"
   },
   {
    "duration": 204,
    "start_time": "2023-05-06T11:44:41.312Z"
   },
   {
    "duration": 200,
    "start_time": "2023-05-06T11:44:41.518Z"
   },
   {
    "duration": 247,
    "start_time": "2023-05-06T11:44:41.720Z"
   },
   {
    "duration": 69,
    "start_time": "2023-05-06T11:44:41.968Z"
   },
   {
    "duration": 2,
    "start_time": "2023-05-06T11:44:42.039Z"
   },
   {
    "duration": 146,
    "start_time": "2023-05-06T11:44:42.043Z"
   },
   {
    "duration": 55,
    "start_time": "2023-05-06T11:44:42.191Z"
   },
   {
    "duration": 77,
    "start_time": "2023-05-06T11:44:42.247Z"
   },
   {
    "duration": 80,
    "start_time": "2023-05-06T11:44:42.326Z"
   },
   {
    "duration": 54,
    "start_time": "2023-05-06T11:44:42.408Z"
   },
   {
    "duration": 81,
    "start_time": "2023-05-06T11:44:42.464Z"
   },
   {
    "duration": 473,
    "start_time": "2023-05-06T11:47:25.148Z"
   },
   {
    "duration": 8,
    "start_time": "2023-05-06T11:47:25.622Z"
   },
   {
    "duration": 2,
    "start_time": "2023-05-06T11:47:38.725Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-06T11:47:38.729Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-06T11:47:38.739Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-06T11:47:38.746Z"
   },
   {
    "duration": 506,
    "start_time": "2023-05-06T11:47:38.760Z"
   },
   {
    "duration": 213,
    "start_time": "2023-05-06T11:47:39.268Z"
   },
   {
    "duration": 184,
    "start_time": "2023-05-06T11:47:39.482Z"
   },
   {
    "duration": 186,
    "start_time": "2023-05-06T11:47:39.667Z"
   },
   {
    "duration": 274,
    "start_time": "2023-05-06T11:47:39.854Z"
   },
   {
    "duration": 73,
    "start_time": "2023-05-06T11:47:40.129Z"
   },
   {
    "duration": 1,
    "start_time": "2023-05-06T11:47:40.205Z"
   },
   {
    "duration": 141,
    "start_time": "2023-05-06T11:47:40.208Z"
   },
   {
    "duration": 65,
    "start_time": "2023-05-06T11:47:40.350Z"
   },
   {
    "duration": 68,
    "start_time": "2023-05-06T11:47:40.417Z"
   },
   {
    "duration": 71,
    "start_time": "2023-05-06T11:47:40.487Z"
   },
   {
    "duration": 64,
    "start_time": "2023-05-06T11:47:40.560Z"
   },
   {
    "duration": 80,
    "start_time": "2023-05-06T11:47:40.625Z"
   },
   {
    "duration": 155,
    "start_time": "2023-05-06T11:48:41.710Z"
   },
   {
    "duration": 187,
    "start_time": "2023-05-06T11:48:47.118Z"
   },
   {
    "duration": 180,
    "start_time": "2023-05-06T11:48:50.765Z"
   },
   {
    "duration": 518,
    "start_time": "2023-05-06T12:59:28.747Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-06T12:59:29.267Z"
   },
   {
    "duration": 10181,
    "start_time": "2023-05-06T12:59:29.276Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-06T12:59:39.458Z"
   },
   {
    "duration": 452,
    "start_time": "2023-05-06T12:59:39.465Z"
   },
   {
    "duration": 154,
    "start_time": "2023-05-06T12:59:39.918Z"
   },
   {
    "duration": 153,
    "start_time": "2023-05-06T12:59:40.074Z"
   },
   {
    "duration": 152,
    "start_time": "2023-05-06T12:59:40.229Z"
   },
   {
    "duration": 208,
    "start_time": "2023-05-06T12:59:40.382Z"
   },
   {
    "duration": 57,
    "start_time": "2023-05-06T12:59:40.591Z"
   },
   {
    "duration": 2,
    "start_time": "2023-05-06T12:59:40.650Z"
   },
   {
    "duration": 100,
    "start_time": "2023-05-06T12:59:40.654Z"
   },
   {
    "duration": 49,
    "start_time": "2023-05-06T12:59:40.756Z"
   },
   {
    "duration": 54,
    "start_time": "2023-05-06T12:59:40.807Z"
   },
   {
    "duration": 51,
    "start_time": "2023-05-06T12:59:40.863Z"
   },
   {
    "duration": 61,
    "start_time": "2023-05-06T12:59:40.915Z"
   },
   {
    "duration": 53,
    "start_time": "2023-05-06T12:59:40.978Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
